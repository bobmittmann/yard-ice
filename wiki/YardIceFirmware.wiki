#summary YARD-ICE Firmware Main

= Introduction =

The software of the *YARD-ICE* is separated into 4 major groups:
  * *SDK Libraries* - Software Development Kit Libraries
  * *YARD-ICE Libraries* - Libraries specific to the application
  * *YARD-ICE Application*
  * *YARD-ICE Targets* - Database of processors, SoC and platforms

One important thing to notice is that the YARD-ICE firmware do not need any external or third-party library. All what it is need to compile the firmware is provided with the source-code.

== SDK Libraries ==

These are a set of supporting libraries located inside the *src/sdk* directory. Each library can be used independently or compiled as a part of the YARD-ICE firmware.

  * *libaltera* - provides functions for loading program (rbf) files into the attached FPGA. It uses an SPI interface.
  * *libbitvec* - bit vector manipulation functions.
  * *libc* - the YARD libc is a small library targeted to embedded systems.
  * *libcm3* - Cortex-M3 specific functions
  * *libcrc* - Cyclic Redundancy Check functions.
  * *libdrv* - drivers for devices like Ethernet, Serial 
  * *libhexdump* - provides functions to display binary data as hexadecimal plus ASCII values, like the hexdump command.
  * *libice-comm* - library used for real-time trace. This tool will send the trace to a remote host if a tool like the YARD-ICE is connected to the JTAG port.
  * *libopcodes* - this library provides disassembler capabilities to the tool.
  * *libstm32f* - hardware access functions for the STM32F family of SoCs. 
  * *libtcpip* -  efficient and small footprint TCP/IP stack, designed for embedded systems.
  * *libthinkos* - the ThinkOS real time operating system. This small RTOS was designed and optimized for ARM Cortex-M cores. It provides a very low context switching latency a useful "_interrupt as thread_" mechanism.
  * *libutil* - set of utilities like a calibrated delay.

== YARD-ICE Libraries ==

...

== YARD-ICE Targets ==

...

== YARD-ICE Application ==

= Compiling =

The source code is located in the *src* directory. To compile make sure you have the *GCC-ARM toolchain* (arm-none-eabi-*) installed into your host computer.

Move inside the *src* directory and type *make*.

{{{
yard-ice/src$ make
Creating: /home/bob/devel/yard-ice/src/release/version.h
- LIBS START ------------------
make[1]: Entering directory `/home/bob/devel/yard-ice/src/sdk/libcm3'

...

LD: /home/bob/devel/yard-ice/src/release/yard-ice.elf
BIN: /home/bob/devel/yard-ice/src/release/yard-ice.bin
SYM: /home/bob/devel/yard-ice/src/release/yard-ice.sym
LST: /home/bob/devel/yard-ice/src/release/yard-ice.lst
}}}

The loadable firmware will be located into the *release* directory and is called: *yard-ice.bin*.

More detailed instructions can be fund at: [YardIceCompileHowTo Yard-ICE Compile How-To].

The source code is located in the *src* directory. To compile make sure you have the *GCC-ARM toolchain* (arm-none-eabi-*) installed into your host computer.
You can compile it by yourself: [http://bobmittmann.blogspot.ca/2012/02/ubuntu-1004-lts-and-arm-gnu-toolchain.html ARM-GCC Tolchain How-To]
or download a pre-compiled package for your system (Note: someone could write a how-to).

Make sure you have the arm-none-eabi-gcc in your PATH:

{{{
$ arm-none-eabi-gcc
arm-none-eabi-gcc: fatal error: no input files
compilation terminated.
}}}

Move inside the *src* directory and type *make*.

{{{
$ cd yard-ice/src
yard-ice/src$ make
Creating: /home/bob/devel/yard-ice/src/release/version.h
- LIBS START ------------------
make[1]: Entering directory `/home/bob/devel/yard-ice/src/sdk/libcm3'
CC 1: /home/bob/devel/yard-ice/src/release/libcm3/cm3-udelay.o
AR: /home/bob/devel/yard-ice/src/release/libcm3/libcm3.a

...

AR: /home/bob/devel/yard-ice/src/release/libopcodes/libopcodes.a
arm-none-eabi-ar: creating /home/bob/devel/yard-ice/src/release/libopcodes/libopcodes.a
LST: /home/bob/devel/yard-ice/src/release/libopcodes/libopcodes.lst
make[1]: Leaving directory `/home/bob/devel/yard-ice/src/sdk/libopcodes'
- LIBS END --------------------
CC 1: /home/bob/devel/yard-ice/src/release/yard-ice.o
LD: /home/bob/devel/yard-ice/src/release/yard-ice.elf
BIN: /home/bob/devel/yard-ice/src/release/yard-ice.bin
SYM: /home/bob/devel/yard-ice/src/release/yard-ice.sym
LST: /home/bob/devel/yard-ice/src/release/yard-ice.lst
yard-ice/src$
}}}

The files will be compiled, by default, into a directory called *release*:
{{{
yard-ice/src$ ls release
libaltera  libcm3  libhexdump   libstm32f   libutil       yard-ice.elf  yard-ice.o
libbitvec  libcrc  libice-comm  libtcpip    version.h     yard-ice.lst  yard-ice.sym
libc       libdrv  libopcodes   libthinkos  yard-ice.bin  yard-ice.map
}}}

The loadable firmware is called: *yard-ice.bin*.

{{{
bob@jazz:~/devel/yard-ice/src$ make help
Targets:

  all        - Build YARD-ICE
  clean      - Remove most generated files
  jtagload   - Build YARD-ICE and try to load it into target

  make V=0|1 [targets] 0 => quiet build (default), 1 => verbose build
  make O=dir [targets] Locate all output files in "dir"
  make D=0|1 [targets] 0 => release (default), 1 => debug
}}}